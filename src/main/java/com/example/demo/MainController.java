package com.example.demo;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;

@CrossOrigin(origins = "*", allowedHeaders = "*")

@RestController // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/add") // Post::  http://localhost:8080/demo/add et ajauter un objet JSON in body
    @ResponseBody
    public User addNewUser(@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userRepository.save(user);
        return user;
    }

    @GetMapping(path = "/all")// Get : http://localhost:8080/demo/all 
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/user/{id}")  // Get :: http://localhost:8080/demo/user/2
	public User getClientById(@PathVariable("id") Integer id) {
		return userRepository.findById(id).get();
	}

    @PutMapping(path = "/user/{id}") // // Get :: http://localhost:8080/demo/user/2  et ajauter un objet JSON in body
	public User updateClient(@PathVariable("id") Integer id, @RequestBody User user) {
		user.setId(id);
		userRepository.save(user);
        return user;

	}

     @DeleteMapping(path = "/user/{id}")  // // Delete :: http://localhost:8080/demo/user/2
	public User deleteUser(@PathVariable("id") Integer id) {
		User user=userRepository.findById(id).get();
		userRepository.deleteById(id);
        return user;

	}
    // Controller Produit
    @Autowired
    private ProdRepo prd;
    @GetMapping(path="/prods")
    public @ResponseBody Iterable<Produit> getProds() {
        return  prd.findAll();
    }

    @GetMapping(path="/prods/{id}")  // Get : http://localhost:8080/produit/prod/{id}
    @ResponseBody
    
    public Produit getProduit(@PathVariable("id") Integer id) {
    //if(prodRepo.findById(id).get()==null) return new Produit();
    return prd.findById(id).get();

  /*  @GetMapping(path="/prd/{id}")
   //@ResponseBody
    public Produit getProduit(@PathVariable("id") Integer id) {
        return prd.findById(id).get();
    }
   /*  @PostMapping("/add")
    public Produit addProduit(@RequestBody Produit prod) {
        //TODO: process POST request
        prd.save(prod);
        return prod;
    }
    @PutMapping("prod/{id}")
    public Produit putProduit(@PathVariable Integer id, @RequestBody Produit entity) {
        //TODO: process PUT request
        entity.setId(id);
        prd.save(entity);
        return entity;
    }
    @DeleteMapping("prod/{id}")

    public Produit deleteProd(@PathVariable Integer id){
        Produit produit=prd.findById(id).get();    
        prd.deleteById(id);
        return produit;  
    }
     */
    
    
   
}}